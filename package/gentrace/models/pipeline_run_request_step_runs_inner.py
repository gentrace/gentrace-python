# coding: utf-8

"""
    Gentrace API

    These API routes are designed to ingest events from clients.  # noqa: E501

    The version of the OpenAPI document: ${npm_package_version}
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from gentrace.models.pipeline_run_request_step_runs_inner_provider import PipelineRunRequestStepRunsInnerProvider

class PipelineRunRequestStepRunsInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    provider: Optional[PipelineRunRequestStepRunsInnerProvider] = None
    elapsed_time: Optional[StrictInt] = Field(None, alias="elapsedTime")
    start_time: Optional[datetime] = Field(None, alias="startTime")
    end_time: Optional[datetime] = Field(None, alias="endTime")
    __properties = ["provider", "elapsedTime", "startTime", "endTime"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PipelineRunRequestStepRunsInner:
        """Create an instance of PipelineRunRequestStepRunsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PipelineRunRequestStepRunsInner:
        """Create an instance of PipelineRunRequestStepRunsInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PipelineRunRequestStepRunsInner.parse_obj(obj)

        _obj = PipelineRunRequestStepRunsInner.parse_obj({
            "provider": PipelineRunRequestStepRunsInnerProvider.from_dict(obj.get("provider")) if obj.get("provider") is not None else None,
            "elapsed_time": obj.get("elapsedTime"),
            "start_time": obj.get("startTime"),
            "end_time": obj.get("endTime")
        })
        return _obj

