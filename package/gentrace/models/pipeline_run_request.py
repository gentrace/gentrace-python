# coding: utf-8

"""
    Gentrace API

    These API routes are designed to ingest events from clients.  # noqa: E501

    The version of the OpenAPI document: ${npm_package_version}
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import List

from pydantic import BaseModel, Field, StrictStr

from gentrace.models.pipeline_run_request_step_runs_inner import (
    PipelineRunRequestStepRunsInner,
)


class PipelineRunRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    name: StrictStr = ...
    step_runs: List[PipelineRunRequestStepRunsInner] = Field(..., alias="stepRuns")
    __properties = ["name", "stepRuns"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PipelineRunRequest:
        """Create an instance of PipelineRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in step_runs (list)
        _items = []
        if self.step_runs:
            for _item in self.step_runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["stepRuns"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PipelineRunRequest:
        """Create an instance of PipelineRunRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PipelineRunRequest.parse_obj(obj)

        _obj = PipelineRunRequest.parse_obj(
            {
                "name": obj.get("name"),
                "step_runs": [
                    PipelineRunRequestStepRunsInner.from_dict(_item)
                    for _item in obj.get("stepRuns")
                ]
                if obj.get("stepRuns") is not None
                else None,
            }
        )
        return _obj
