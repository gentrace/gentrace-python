# coding: utf-8

"""
    Gentrace API

    These API routes are designed to ingest events from clients.  # noqa: E501

    The version of the OpenAPI document: 0.2.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field, StrictStr

from gentrace.models.pipeline_run_request_step_runs_inner_provider_model_params_value import (
    PipelineRunRequestStepRunsInnerProviderModelParamsValue,
)


class PipelineRunRequestStepRunsInnerProvider(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    name: Optional[StrictStr] = None
    invocation: Optional[StrictStr] = None
    model_params: Optional[
        Dict[str, PipelineRunRequestStepRunsInnerProviderModelParamsValue]
    ] = Field(None, alias="modelParams")
    inputs: Optional[
        Dict[str, PipelineRunRequestStepRunsInnerProviderModelParamsValue]
    ] = None
    outputs: Optional[Dict[str, Any]] = None
    __properties = ["name", "invocation", "modelParams", "inputs", "outputs"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PipelineRunRequestStepRunsInnerProvider:
        """Create an instance of PipelineRunRequestStepRunsInnerProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in model_params (dict)
        _field_dict = {}
        if self.model_params:
            for _key in self.model_params:
                if self.model_params[_key]:
                    _field_dict[_key] = self.model_params[_key].to_dict()
            _dict["modelParams"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in inputs (dict)
        _field_dict = {}
        if self.inputs:
            for _key in self.inputs:
                if self.inputs[_key]:
                    _field_dict[_key] = self.inputs[_key].to_dict()
            _dict["inputs"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PipelineRunRequestStepRunsInnerProvider:
        """Create an instance of PipelineRunRequestStepRunsInnerProvider from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PipelineRunRequestStepRunsInnerProvider.parse_obj(obj)

        _obj = PipelineRunRequestStepRunsInnerProvider.parse_obj(
            {
                "name": obj.get("name"),
                "invocation": obj.get("invocation"),
                "model_params": dict(
                    (
                        _k,
                        Dict[
                            str, PipelineRunRequestStepRunsInnerProviderModelParamsValue
                        ].from_dict(_v),
                    )
                    for _k, _v in obj.get("modelParams").items()
                ),
                "inputs": dict(
                    (
                        _k,
                        Dict[
                            str, PipelineRunRequestStepRunsInnerProviderModelParamsValue
                        ].from_dict(_v),
                    )
                    for _k, _v in obj.get("inputs").items()
                ),
                "outputs": obj.get("outputs"),
            }
        )
        return _obj
