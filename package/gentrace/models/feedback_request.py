# coding: utf-8

"""
    Gentrace API

    These API routes are designed to ingest events from clients.  # noqa: E501

    The version of the OpenAPI document: 0.2.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class FeedbackRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    pipeline_run_id: StrictStr = Field(..., alias="pipelineRunId")
    rating: StrictStr = ...
    recorded_time: datetime = Field(..., alias="recordedTime")
    details: Optional[StrictStr] = None
    __properties = ["pipelineRunId", "rating", "recordedTime", "details"]

    @validator('rating')
    def rating_validate_enum(cls, v):
        if v not in ('positive', 'negative', 'neutral'):
            raise ValueError("must validate the enum values ('positive', 'negative', 'neutral')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeedbackRequest:
        """Create an instance of FeedbackRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if details (nullable) is None
        if self.details is None:
            _dict['details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeedbackRequest:
        """Create an instance of FeedbackRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FeedbackRequest.parse_obj(obj)

        _obj = FeedbackRequest.parse_obj({
            "pipeline_run_id": obj.get("pipelineRunId"),
            "rating": obj.get("rating"),
            "recorded_time": obj.get("recordedTime"),
            "details": obj.get("details")
        })
        return _obj

